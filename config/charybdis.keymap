#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define U_TAPPING_TERM 200

/ {
    chosen { zmk,matrix_transform = &default_transform; };
};

/ {
    combos {
        compatible = "zmk,combos";

        LeftClickRight {
            bindings = <&mkp LCLK>;
            key-positions = <19 20>;
        };

        RightClickRight {
            bindings = <&mkp RCLK>;
            key-positions = <20 21>;
        };

        MiddleClickRight {
            bindings = <&mkp MCLK>;
            key-positions = <21 22>;
        };

        ParaLeft {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <4 16>;
        };

        ParaRight {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <7 19>;
        };

        BrakLeft {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <3 15>;
        };

        BrakRight {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <8 20>;
        };

        BraceLeft {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <2 14>;
        };

        BraceRight {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <9 21>;
        };

        Delete {
            bindings = <&kp DELETE>;
            key-positions = <8 9>;
        };

        CapsWord {
            bindings = <&caps_word>;
            key-positions = <17 18>;
        };
    };

    behaviors {
        u_mt: u_mt {
            compatible = "zmk,behavior-hold-tap";
            label = "u_mt";
            #binding-cells = <2>;
            tapping_term_ms = <U_TAPPING_TERM>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        u_lt: u_lt {
            compatible = "zmk,behavior-hold-tap";
            label = "u_lt";
            #binding-cells = <2>;
            tapping_term_ms = <U_TAPPING_TERM>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
        };

        Shift_Enter: Shift_Enter {
            compatible = "zmk,behavior-hold-tap";
            label = "SHIFT_ENTER";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <40>;
            tapping-term-ms = <100>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        BASE {
            bindings = <
&u_mt LS(GRAVE) Q  &u_mt EXCL W      &u_mt AT E        &u_mt NUMBER_3 R  &u_mt LS(NUMBER_4) T  &u_mt PERCENT Y    &u_mt LS(NUMBER_6) U  &u_mt LS(N7) I       &u_mt KP_ASTERISK O           &u_mt MINUS P                &u_mt HOME LEFT_BRACKET     &kp BSPC
&u_mt ESCAPE A     &u_mt LEFT_GUI S  &u_mt LEFT_ALT D  &u_mt LCTRL F     &u_mt LEFT_SHIFT G    &kp H              &u_mt ENTER J         &u_mt LEFT_SHIFT K   &u_mt RCTRL K                 &u_mt LEFT_ALT SEMICOLON     &u_mt RIGHT_GUI APOSTROPHE  &kp DELETE
&mo 5              &u_mt LA(F4) Z    &kp X             &kp C             &kp V                 &kp B              &kp N                 &u_mt PAUSE_BREAK M  &u_mt LEFT_PARENTHESIS COMMA  &u_mt RIGHT_PARENTHESIS DOT  &u_mt END FSLH              &u_mt PRINTSCREEN RIGHT_BRACKET
                                                       &mo 1             &kp SPACE             &mkp LCLK          &mkp RCLK             &u_lt 2 TAB
            >;
        };

        NAV {
            bindings = <
&kp F1  &kp F2    &kp UP    &trans     &trans          &trans       &u_mt LA(NUMBER_1) KP_NUMBER_7  &u_mt LA(NUMBER_2) KP_NUMBER_8     &u_mt LA(NUMBER_3) KP_NUMBER_9  &u_mt KP_MULTIPLY KP_PLUS  &kp C_VOLUME_UP    &kp BACKSPACE
&trans  &kp LEFT  &kp DOWN  &kp RIGHT  &kp LEFT_SHIFT  &kp ENTER    &u_mt LA(Q) KP_NUMBER_4         &u_mt LA(W) N5                     &u_mt LA(E) N6                  &u_mt KP_EQUAL KP_MINUS    &kp C_VOLUME_DOWN  &trans
&trans  &trans    &trans    &trans     &trans          &trans       &u_mt LA(A) KP_NUMBER_1         &u_mt LA(S) KP_NUMBER_2            &u_mt LA(D) KP_NUMBER_3         &kp ENTER                  &kp C_MUTE         &trans
                            &trans     &trans          &trans       &u_mt KP_COMMA KP_DOT           &u_mt LA(KP_NUMBER_0) KP_NUMBER_0
            >;
        };

        SYMNUM {
            bindings = <
&bt BT_CLR  &kp EXCL      &kp AT        &kp HASH      &kp DLLR      &kp PRCNT       &trans         &trans         &trans         &bt BT_NXT    &bt BT_CLR_ALL  &out OUT_BLE
&trans      &trans        &bt BT_PRV    &bt BT_NXT    &trans        &trans          &bt BT_DISC 1  &bt BT_DISC 2  &bt BT_DISC 3  &bt BT_PRV    &bt BT_CLR      &out OUT_USB
&trans      &out OUT_TOG  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0    &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 0  &bootloader     &out OUT_TOG
                                        &trans        &trans        &mo 3           &bt BT_DISC 0  &trans
            >;
        };

        FUN {
            bindings = <
&trans  &trans   &kp F1  &kp F2   &kp F3   &kp F4     &bt BT_SEL 0  &bt BT_SEL 1      &bt BT_SEL 2       &bt BT_SEL 3     &bt BT_SEL 4  &bt BT_CLR
&trans  &kp DEL  &kp F5  &kp F6   &kp F7   &kp F8     &out OUT_TOG  &kp K_PLAY_PAUSE  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_MUTE    &kp LALT
&trans  &trans   &kp F9  &kp F10  &kp F11  &kp F12    &trans        &trans            &trans             &trans           &trans        &to 0
                         &trans   &trans   &trans     &trans        &trans
            >;
        };

        AUTO-MOUSE {
            bindings = <
&trans  &trans  &trans  &trans     &trans  &trans       &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans     &trans  &trans       &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans     &trans  &trans       &trans  &trans  &trans  &trans  &trans  &trans
                        &mkp LCLK  &trans  &mkp RCLK    &trans  &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans
            >;
        };
    };
};
